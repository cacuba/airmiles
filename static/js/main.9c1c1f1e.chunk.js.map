{"version":3,"sources":["components/errorMessage/index.js","components/loading/index.js","components/employees/index.js","serviceWorker.js","index.js"],"names":["ErrorMessage","className","onClick","window","location","reload","Loading","Employees","useState","employees","setEmployees","errorMessage","setErrorMessage","a","fetch","json","then","data","map","employee","target","Object","assign","favourite","catch","useEffect","fetchEmployees","EmployeeItem","tabIndex","id","event","favouriteId","targetEmployee","favouriteHandler","key","employee_name","employee_age","employee_salary","EmployeesList","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"uTAaeA,MAVf,WACE,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,yBACb,4CAAiB,4BAAQA,UAAU,UAAUC,QAAS,kBAAMC,OAAOC,SAASC,WAA3D,cAAjB,4B,MCMOC,MAVf,WACE,OACE,yBAAKL,UAAU,WACb,yBAAKA,UAAU,mBAAf,0B,MC6ESM,MA3Ef,WAAsB,IAAD,EAEeC,mBAAS,IAFxB,mBAEZC,EAFY,KAEDC,EAFC,OAGqBF,oBAAS,GAH9B,mBAGZG,EAHY,KAGEC,EAHF,iDAKnB,sBAAAC,EAAA,sEACoBC,MARI,qDAOxB,cAEMC,OACDC,MAAK,SAAAP,GAMJ,OALqBA,EAAUQ,KAAKC,KAAI,SAAAC,GACtC,IAAMC,EAASC,OAAOC,OAAO,GAAIH,GAEjC,OADAC,EAAOG,WAAY,EACZH,QAIVJ,MAAK,SAAAP,GAAS,OAAIC,EAAaD,MAC/Be,OAAM,kBAAMZ,GAAgB,MAZjC,4CALmB,sBAoBnBa,qBAAU,YApBS,mCAqBjBC,KACC,IAEH,IAUMC,EAAe,SAAC,GAAD,IAAGR,EAAH,EAAGA,SAAH,OACnB,wBACES,SAAUT,EAASU,GACnB5B,UAAS,kCAA6BkB,EAASI,UAAY,YAAc,KAEzE,yBAAKtB,UAAU,sBACb,4BACEC,QAAS,SAAC4B,GAAD,OAjBQ,SAACC,GACxB,IAAMC,EAAiB,YAAIvB,GAAWS,KAAI,SAAAE,GAIxC,OAHIA,EAAOS,KAAOE,IAChBX,EAAOG,WAAaH,EAAOG,WAEtBH,KAETV,EAAasB,GAUaC,CAAiBH,EAAMV,OAAN,KACrCnB,UAAU,mBACViC,IAAKf,EAASU,GAAIA,GAAIV,EAASU,IAE9BV,EAASI,UAAY,mBAAqB,cAG/C,yBAAKtB,UAAU,iBACZkB,EAASgB,eAEZ,yBAAKlC,UAAU,iBAAf,QACQkB,EAASiB,aADjB,gBAC4CjB,EAASkB,mBAInDC,EAAgB,SAAC,GAAD,QAAG7B,iBAAH,MAAe,KAAf,SACpBA,GACAA,EAAUS,KACR,SAAAC,GAAQ,OAAI,kBAACQ,EAAD,CAAcO,IAAKf,EAASU,GAAIV,SAAUA,QAG1D,OACE,oCACE,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,kBACZ,kBAACqC,EAAD,CAAe7B,UAAWA,OAG5BA,GAAa,kBAAC,EAAD,MACdE,GAAgB,kBAAC,EAAD,QClEH4B,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c1c1f1e.chunk.js","sourcesContent":["import React from 'react';\nimport './ErrorMessage.scss';\n\nfunction ErrorMessage() {\n  return (\n    <div className=\"error-message\">\n      <div className=\"error-message-content\">\n        <p>Error! Please <button className=\"refresh\" onClick={() => window.location.reload()}>click here</button> to refresh the page.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default ErrorMessage;\n","import React from 'react';\nimport './Loading.scss';\n\nfunction Loading() {\n  return (\n    <div className=\"loading\">\n      <div className=\"loading-content\">\n        Loading Employees...\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React, { useState, useEffect } from 'react';\nimport ErrorMessage from '../errorMessage';\nimport Loading from '../loading';\nimport './Employees.scss';\n\n\nconst EMPLOYESS_API_URL = 'https://dummy.restapiexample.com/api/v1/employees';\n\nfunction Employees() {\n\n  const [employees, setEmployees] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  async function fetchEmployees() {\n    const res = await fetch(EMPLOYESS_API_URL);\n    res.json()\n      .then(employees => {\n        const objEmployees = employees.data.map(employee => {\n          const target = Object.assign({}, employee);\n          target.favourite = false;\n          return target;\n        })\n        return objEmployees;\n      })\n      .then(employees => setEmployees(employees))\n      .catch(() => setErrorMessage(true))\n  }\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const favouriteHandler = (favouriteId) => {\n    const targetEmployee = [...employees].map(target => {\n      if (target.id === favouriteId) {\n        target.favourite = !target.favourite;\n      };\n      return target;\n    });\n    setEmployees(targetEmployee);\n  }\n  \n  const EmployeeItem = ({ employee }) => \n    <li \n      tabIndex={employee.id} \n      className={`employees-list-employee ${employee.favourite ? 'favourite' : ''}`}\n    >\n      <div className=\"employee-favourite\">\n        <button \n          onClick={(event) => favouriteHandler(event.target['id'])} \n          className=\"favourite-button\" \n          key={employee.id} id={employee.id}\n        >\n          {employee.favourite ? 'Remove Favourite' : 'Favourite'}\n        </button>\n      </div>\n      <div className=\"employee-name\">\n        {employee.employee_name}\n      </div>\n      <div className=\"employee-info\">\n        Age: {employee.employee_age} | Salary: $ {employee.employee_salary}\n      </div>\n    </li>;\n\n  const EmployeesList = ({ employees = null }) => \n    employees && \n    employees.map(\n      employee => <EmployeeItem key={employee.id} employee={employee} />\n    );\n\n  return (\n    <>\n      <div className=\"employees\">\n        <ul className=\"employees-list\">\n          <EmployeesList employees={employees} />\n        </ul>\n      </div>\n      {!employees && <Loading />}\n      {errorMessage && <ErrorMessage />}\n    </>\n  );\n}\n\nexport default Employees;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Employees from './components/employees';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Employees />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}